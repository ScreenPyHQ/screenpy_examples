[tool.poetry]
name = "screenpy_examples"
version = "0.1.0"
description = "Screenpy Examples"
authors = ["Perry Goy <perry.goy@gmail.com>"]
maintainers = ["Gabe Langton", "Marcel Wilson"]
license = "MIT"
repository = "https://github.com/ScreenPyHQ/screenpy_examples"
#documentation = "https://screenpy-docs.readthedocs.io"  ????
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: BDD",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
]


[tool.poetry.dependencies]
python = "^3.11"
pytest = "*"
#screenpy = "*"
screenpy = { git = "git@github.com:ScreenPyHQ/screenpy.git", branch = "trunk"}
screenpy-selenium = "*"
screenpy-appium = "*"
screenpy-playwright = "*"
screenpy-requests = "*"
screenpy-adapter-allure = "^4.0.2"
pyderman = "^3.3.2"
semantic-version = "^2.10.0"

mypy = {version = "*", optional = true}
black = {version = "*", optional = true}
isort = {version = "*", optional = true}
flake8 = {version = "*", optional = true}
pylint = {version = "*", optional = true}
coverage = {version = "*", optional = true}
ruff = {version = "*", optional = true}
setuptools = "*"
types-requests = {version = "^2.31.0.2", optional = true}


[tool.poetry.extras]
dev = [
    "pre-commit",
    "pylint",
    "mypy",
    "black",
    "isort",
    "flake8",
    "coverage",
    "ruff",
    "types-requests",
    "screenpy-selenium",
    "screenpy-appium",
    "screenpy-playwright",
    "screenpy-requests",
    "screenpy-adapter-allure",
]

#allure = ["screenpy-adapter-allure"] # dont have one yet
appium = ["screenpy-appium"]
playwright = ["screenpy-playwright"]
pyotp = ["screenpy-pyotp"]
requests = ["screenpy-requests"]
selenium = ["screenpy-selenium"]



[tool.isort]
line_length = 88
multi_line_output = 3
include_trailing_comma = "True"
use_parentheses = "True"
combine_as_imports = "True"
extend_skip = [".idea"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # Pyflakes
    "I",  # isort
    "C4",  # flake8-comprehensions
    "TCH",  # type checking
    "RUF",  # ruff specific
#    "UP",  # python upgrade
    "A",  # built-ins
#    "B",  # bugbear
    #    "ARG",  # unused arguments
    #    "PT",  # Pytest style
    #    "RET", # flake8 return
    #    "SIM", # flake8 simplify
    #    "TD",  #TODOs
    #    "FBT",  # boolean trap
#    "ANN",  # annotations
]
ignore = [
    #    "PT003",  # pytest fixture scope implied
    #    "PT004",  # pytest fixture setup doesn't return anything
    "RUF100",  # blanket noqa
    "ANN101",  # missing-type-self
    "ANN102",  # cls 
    #    "ANN401",  # any-type
]
# Avoid trying to fix flake8-bugbear (`B`) violations.
#unfixable = ["B"]

# Same as Black.
line-length = 88

exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
]

# Assume Python 3.11.
target-version = "py311"


[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"screenpy_examples/screenpy_selenium/the_internet/features_pytest/setup_selenium.py" = ["A003"]


[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true


[tool.ruff.flake8-pytest-style]
mark-parentheses = false


[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true


#[tool.ruff.flake8-annotations]
#mypy-init-return = true


[tool.ruff.flake8-annotations]
# ignore returns types for functions that implicity or explicitly only return None
suppress-none-returning = true
allow-star-arg-any = true


[tool.black]
line-length = 88
target-version = ['py311']

# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
)

'''
