[tool.poetry]
name = "screenpy_examples"
version = "0.2.0"
description = "Screenpy Examples"
authors = ["Perry Goy <perry.goy@gmail.com>"]
maintainers = ["Gabe Langton", "Marcel Wilson"]
license = "MIT"
repository = "https://github.com/ScreenPyHQ/screenpy_examples"
#documentation = "https://screenpy-docs.readthedocs.io"  ????
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: BDD",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
]


[tool.poetry.dependencies]
python = "^3.11"
pytest = "*"
selenium = "4.12.0" # just until we figure out the new headless issues
#screenpy = "*"
screenpy = { git = "git@github.com:ScreenPyHQ/screenpy.git", branch = "trunk"}
screenpy-selenium = "*"
screenpy-appium = "*"
screenpy-playwright = "*"
screenpy-requests = "*"
screenpy-adapter-allure = "^4.0.2"
#webdriver-manager = "*"
# master has a bugfix they haven't pushed to pypi yet
webdriver-manager = { git = "git@github.com:SergeyPirogov/webdriver_manager.git", branch = "master"}
semantic-version = "^2.10.0"
setup-selenium-testing = "*"

mypy = {version = "*", optional = true}
black = {version = "*", optional = true}
isort = {version = "*", optional = true}
flake8 = {version = "*", optional = true}
pylint = {version = "*", optional = true}
coverage = {version = "*", optional = true}
ruff = {version = ">=0.2.0", optional = true}
setuptools = "*"
types-requests = {version = "^2.31.0.2", optional = true}


[tool.poetry.extras]
dev_all = [
    "pre-commit",
    "pylint",
    "mypy",
    "black",
    "isort",
    "flake8",
    "coverage",
    "ruff",
    "types-requests",
    "screenpy-selenium",
    "screenpy-appium",
    "screenpy-playwright",
    "screenpy-requests",
    "screenpy-adapter-allure",
]

#allure = ["screenpy-adapter-allure"] # dont have one yet
appium = ["screenpy-appium"]
playwright = ["screenpy-playwright"]
pyotp = ["screenpy-pyotp"]
requests = ["screenpy-requests"]
selenium = ["screenpy-selenium"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py311"  # minimum supported version
line-length = 88  # same as Black.

extend-exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
]

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
#    "D",  # pydocstyle  # leaving this off since this isn't a published package
    "E",  # pycodestyle error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
#    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I",  # isort
    "ICN",  # flake8-import-conventions
#    "ISC",  # flake8-implicit-str-concat
#    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
#    "PL",  # pylint
#    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specific
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
#    "TRY",  # tryceratops
#    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020

    # we would like these someday, but not yet
    # "FURB",  # refurb
]
ignore = [
    "D107",  # missing __init__ docstring, we do that in the class docstring.
    "D203",  # one blank line before class docstring, no thanks!
    "D212",  # multi line summary first line, we want a one line summary.
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN102",  # missing cls annotation, we only annotate cls when we return it.
]

extend-safe-fixes = [
    "EM101",
    "EM102",
    "TCH001", "TCH002", "TCH003", "TCH004",
    #    "SIM108"
    # maybe?
    #    "F841",
    "C419",
    "D200", "D205", "D415",
    "PT003", "PT006", "PT018",
    "RET504",
    "UP007",
]


[tool.ruff.lint.per-file-ignores]
#"__init__.py" = ["F401"]  # do we need this anymore?
"screenpy_examples/screenpy_selenium/the_internet/features_pytest/setup_selenium.py" = ["A003"]


[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false
known-first-party = ["screenpy_selenium", "tests"]


[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false


[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.flake8-annotations]
# ignore returns types for functions that implicity or explicitly only return None
suppress-none-returning = true
allow-star-arg-any = true
#mypy-init-return = true


[tool.black]
line-length = 88
target-version = ['py311']

# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
    | \/docs
    | ^/setup.py
)

'''

[tool.isort]
line_length = 88
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
combine_as_imports = true
extend_skip = [".idea"]
